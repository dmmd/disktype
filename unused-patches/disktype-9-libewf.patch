--- disktype-9.orig/ewf.c	1970-01-01 01:00:00.000000000 +0100
+++ disktype-9/ewf.c	2011-10-10 20:50:43.000000000 +0200
@@ -0,0 +1,247 @@
+/*
+ * ewf.c
+ * Layered data source for EWF images via libewf.
+ * For use with disktype, Copyright (c) 2003 Christoph Pfisterer
+ *
+ * Copyright (c) 2007 David Loveall
+ * Copyright (c) 2011, Joachim Metz <jbmetz@users.sourceforge.net>
+ *
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE. 
+ */
+
+#include "global.h"
+
+#ifdef USE_LIBEWF
+#include <libewf.h>
+
+#if !defined( LIBEWF_HANDLE )
+
+/* libewf version 2 no longer defines LIBEWF_HANDLE
+ */
+#define HAVE_LIBEWF_V2_API
+#endif
+
+/*
+ * types
+ */
+
+typedef struct ewf_source
+{
+	SOURCE c;
+#if defined( HAVE_LIBEWF_V2_API )
+	libewf_handle_t *e;
+#else
+	LIBEWF_HANDLE *e;
+#endif
+} EWF_SOURCE;
+
+/*
+ * helper functions
+ */
+
+static \
+SOURCE *init_ewf_source(
+         char * const filenames[],
+         uint16_t file_amount );
+
+static \
+int read_block_ewf(
+     SOURCE *s,
+     u8 pos,
+     void *buf );
+
+static \
+void close_ewf(
+      SOURCE *s );
+
+/*
+ * ewf analyzer
+ */
+void analyze_ewf(
+      char * const filenames[],
+      uint16_t file_amount )
+{
+	SOURCE *s = NULL;
+
+	/* create and analyze wrapped source */
+	s = init_ewf_source(
+	     filenames,
+	     file_amount );
+
+	analyze_source(
+	 s,
+	 1 );
+
+	close_source(
+	 s );
+}
+
+/*
+ * initialize the ewf source
+ */
+static \
+SOURCE *init_ewf_source(
+         char * const filenames[],
+         uint16_t file_amount )
+{
+	EWF_SOURCE *src         = NULL;
+	uint32_t safe_blocksize = 0;
+
+	src = (EWF_SOURCE *) malloc(
+	                     sizeof(EWF_SOURCE) );
+
+	if( src == NULL )
+	{
+		bailout("Out of memory");
+	}
+	memset(
+	 src,
+	 0,
+	 sizeof(EWF_SOURCE) );
+
+#if defined( HAVE_LIBEWF_V2_API )
+	if( libewf_handle_initialize(
+	     &( src->e ),
+	     NULL ) != 1 )
+	{
+		bailout("Out of memory");
+	}
+	if( libewf_handle_open(
+	     src->e,
+	     filenames,
+	     file_amount,
+	     LIBEWF_OPEN_READ,
+	     NULL ) != 1 )
+	{
+		bailout("Out of memory");
+	}
+#else
+	src->e = libewf_open(
+	          filenames,
+	          file_amount,
+	          LIBEWF_OPEN_READ );
+
+	if( src->e == NULL )
+	{
+		bailout("Can't open EWF file");
+	}
+#endif
+	src->c.size_known = 1;
+
+#if defined( HAVE_LIBEWF_V2_API )
+	if( libewf_handle_get_media_size(
+	     src->e,
+	     &( src->c.size ),
+	     NULL ) != 1 )
+	{
+		bailout("Unable to get media size of EWF file");
+	}
+	if( libewf_get_bytes_per_sector(
+	     src->e,
+	     &safe_blocksize,
+	     NULL ) != 1 )
+	{
+		bailout("Unable to get sector size of EWF file");
+	}
+
+#elif !defined( LIBEWF_STRING_DIGEST_HASH_LENGTH_MD5 )
+	if( libewf_get_media_size(
+	     src->e,
+	     &( src->c.size ) ) != 1 )
+	{
+		bailout("Unable to get media size of EWF file");
+	}
+	if( libewf_get_bytes_per_sector(
+	     src->e,
+	     &safe_blocksize ) != 1 )
+	{
+		bailout("Unable to get sector size of EWF file");
+	}
+
+#else
+	src->c.size    = libewf_get_media_size(src->e);
+	safe_blocksize = libewf_get_bytes_per_sector(src->e);
+#endif
+
+	src->c.blocksize  = (int) safe_blocksize;
+	src->c.read_block = read_block_ewf;
+	src->c.close      = close_ewf;
+
+	return( (SOURCE *) src );
+}
+
+/*
+ * raw read
+ * read from lower layer
+ */
+static \
+int read_block_ewf(
+     SOURCE *s,
+     u8 pos,
+     void *buf )
+{
+	EWF_SOURCE *es = (EWF_SOURCE *)s;
+
+#if defined( HAVE_LIBEWF_V2_API )
+	if( libewf_handle_read_random(
+	     es->e,
+	     buf,
+	     (size_t) es->c.blocksize,
+	     pos
+	     NULL ) == -1 )
+
+#else
+	if( libewf_read_random(
+	     es->e,
+	     buf,
+	     (size_t) es->c.blocksize,
+	     pos ) == -1 )
+#endif
+	{
+		return( 0 );
+	}
+	return( 1 );
+}
+
+/*
+ * cleanup
+ */
+static \
+void close_ewf(
+      SOURCE *s )
+{
+	EWF_SOURCE *es = (EWF_SOURCE *)s;
+
+#if defined( HAVE_LIBEWF_V2_API )
+	libewf_handle_close(
+	 es->e,
+	 NULL );
+	libewf_handle_free(
+	 &( es->e ),
+	 NULL );
+#else
+	libewf_close(
+	 es->e );
+#endif
+}
+
+#endif
+/* EOF */
--- disktype-9.orig/main.c	2003-05-24 19:35:44.000000000 +0200
+++ disktype-9/main.c	2011-10-10 19:44:54.000000000 +0200
@@ -27,6 +27,10 @@
 
 #include "global.h"
 
+#ifdef USE_LIBEWF
+#include <libewf.h>
+#endif
+
 #ifdef USE_MACOS_TYPE
 #include <CoreServices/CoreServices.h>
 #endif
@@ -38,6 +42,10 @@
 static void analyze_file(const char *filename);
 static void print_kind(int filekind, u8 size, int size_known);
 
+#ifdef USE_LIBEWF
+void analyze_ewf(char * const filenames[], uint16_t file_amount);
+#endif
+
 #ifdef USE_MACOS_TYPE
 static void show_macos_type(const char *filename);
 #endif
@@ -59,7 +67,19 @@
   /* loop over filenames */
   print_line(0, "");
   for (i = 1; i < argc; i++) {
+#ifndef USE_LIBEWF
     analyze_file(argv[i]);
+#endif
+#ifdef USE_LIBEWF
+    if (libewf_check_file_signature(argv[i]) == 1) {
+      print_line(0, "EWF image");
+      analyze_ewf(&argv[i], argc-i);
+      return 0;
+    }
+    else {
+      analyze_file(argv[i]);
+    }
+#endif
     print_line(0, "");
   }
 
--- disktype-9.orig/Makefile	2006-01-12 18:55:15.000000000 +0100
+++ disktype-9/Makefile	2011-10-10 19:44:54.000000000 +0200
@@ -9,7 +9,7 @@
          buffer.o file.o cdaccess.o cdimage.o vpc.o compressed.o \
          detect.o apple.o amiga.o atari.o dos.o cdrom.o \
          linux.o unix.o beos.o archives.o \
-         udf.o blank.o cloop.o
+         udf.o blank.o cloop.o ewf.o
 
 TARGET = disktype
 
@@ -43,6 +43,13 @@
   endif
 endif
 
+ifneq ($(LIBEWF),)
+  CPPFLAGS += -DUSE_LIBEWF
+  CFLAGS   += -I/usr/local/include
+  LDFLAGS  += -L/usr/local/lib
+  LIBS     += -lewf
+endif
+
 # real making
 
 all: $(TARGET)
--- disktype-9.orig/Seedfile	2006-01-12 18:55:15.000000000 +0100
+++ disktype-9/Seedfile	2011-10-10 19:44:54.000000000 +0200
@@ -7,7 +7,7 @@
          buffer.c file.c cdaccess.c cdimage.c vpc.c compressed.c
          detect.c apple.c amiga.c atari.c dos.c cdrom.c
          linux.c unix.c beos.c archives.c
-         udf.c blank.c cloop.c;
+         udf.c blank.c cloop.c ewf.c;
 
   cflags "-D_LARGEFILE_SOURCE" "-D_FILE_OFFSET_BITS=64";
 }
